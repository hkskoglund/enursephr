using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Documents;
using System.Windows;
using System.Windows.Media;

namespace CCC.BusinessLayer
{
    // Properties with "persistence ignorance", miss the ability to tag properties
    // in the entity framework with persistence ignorance, then these properties
    // could be partly autogenerated and I could work in the EF visual editor

     public partial class CarePlanDiagnosis : global::System.Data.Objects.DataClasses.EntityObject
     {


       private Paragraph _pConcept = new Paragraph();
 
        private string _concept;

        public string Concept
        {
            get
            {
                return this._concept;
            }
          
            set
            {
                if ((this._concept != value))
                {
                    //Ethis.SendPropertyChanging();
                    //  this.ReportPropertyChanging("Concept");

                    // Get concept from framework
                    
                    this._pConcept.Inlines.Clear();
                    this._concept = value;
                    if (this._concept == null) this._concept = "";
                    this._pConcept.Inlines.Add(this._concept);

                    //E  this.SendPropertyChanged("Concept");
                    //  this.ReportPropertyChanged("Concept");   
                }
            }
        }

        public FrameworkDiagnosis getFrameworkDiagnosis(CCCFrameworkCompactEntities ctx)
        {
            List<FrameworkDiagnosis> q = new List<FrameworkDiagnosis>();

            string langName = (string)Application.Current.Properties["LanguageName"];
            string version = (string)Application.Current.Properties["Version"];

            //langName = "nb-NO";// Force, must be removed!!!

            if (this.MinorCode != null)


                q = (from d in ctx.Nursing_Diagnosis
                     where d.Language_Name == langName &&
                     d.Version == version &&
                     d.ComponentCode == this.ComponentCode &&
                     d.MajorCode == (decimal)this.MajorCode &&
                     d.MinorCode == this.MinorCode
                     select d).ToList();
            else


                q = (from d in ctx.Nursing_Diagnosis
                     where d.Language_Name == langName &&
                     d.Version == version &&
                     d.ComponentCode == this.ComponentCode &&
                     d.MajorCode == (decimal)this.MajorCode &&
                     d.MinorCode == null
                     select d).ToList();

            if (q.Count == 0)
                return null;
            else
                return q.First<FrameworkDiagnosis>();
        }

        #region Automatic properties
        // Tip from John Papa http://www.simple-talk.com/dotnet/.net-framework/.net-3.5-language-enhancements/
        // So-called "automatic properties", no need to code too much on simple properties....
        // Accessed: 26 february 2008

        public string ComponentName
        {
            get;
            set;
        }
      
        public string CreationDateString
        {
            get ; set ;
        }


        public string Definition
        {
            get;
            set;
        }

        #endregion

        private Section _FlowDiagnosis = new Section();

     
        private Paragraph _pReasonForDiagnosis = new Paragraph();

         

        //partial void OnCreated()
        //{
        //    this._pConcept = new Paragraph();
        //    this._pReasonForDiagnosis = new Paragraph();
        //    this._FlowDiagnosis = new Section();
        //}
        //partial void OnLoaded()
        //{
        //    this._pConcept = new Paragraph();
            
        //    this._pReasonForDiagnosis = new Paragraph();
           
        //    if (this._ReasonForDiagnosis != null)
        //      this._pReasonForDiagnosis.Inlines.Add(this._ReasonForDiagnosis);
        //}

        public Section FlowDiagnosis
        {
            get
            {
                this._FlowDiagnosis.Blocks.Clear();
               
               // Paragraph pConcept = new Paragraph();
                this._pConcept.Margin = new Thickness(0, 0, 0, 0);
                this._pConcept.Foreground = Brushes.Black;
                this._pConcept.ToolTip = this.Definition;
                
               // pConcept.Inlines.Add(this._Concept);

                string oldConcept = this.Concept;
                this.Concept = this.Title;
                this._FlowDiagnosis.Blocks.Add(this._pConcept);

                Paragraph pCreator = new Paragraph();

                // LANG attrib
                pCreator.FontSize = 9;
                pCreator.Margin = new Thickness(0, 0, 0, 0);
                pCreator.Inlines.Add(new Run("Created " + this.CreationDateString + " by N.N"));
                this._FlowDiagnosis.Blocks.Add(pCreator);
            

                 if (this._ReasonForDiagnosis != null)
                 {
                     //Paragraph pReason = new Paragraph();
                     this._pReasonForDiagnosis.FontSize = 9;
                     this._pReasonForDiagnosis.Margin = new Thickness(5, 0, 0, 0);
                    // this._pReasonForDiagnosis.Inlines.Add(this._ReasonForDiagnosis);
                        this._FlowDiagnosis.Blocks.Add(this._pReasonForDiagnosis);
                 }

                 Paragraph pTag = new Paragraph();
                 pTag.FontSize = 10;
                 pTag.Margin = new Thickness(0, 0, 0, 0);
                 pTag.Inlines.Add(new Run("Diagnosis: " + oldConcept));
                 this._FlowDiagnosis.Blocks.Add(pTag);

                return this._FlowDiagnosis;
            }
        }


        partial void OnReasonForDiagnosisChanged()
        {
            if (this._ReasonForDiagnosis == null)
            {
                Section d = this.FlowDiagnosis; // Update diagnosis
            }
            this._pReasonForDiagnosis.Inlines.Clear();
            if (this._ReasonForDiagnosis != null)
              this._pReasonForDiagnosis.Inlines.Add(this._ReasonForDiagnosis);
       
        }
  
        
    }
}
